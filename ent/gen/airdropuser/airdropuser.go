// Code generated by ent, DO NOT EDIT.

package airdropuser

import (
	"github.com/go-ent/ent/dialect/sql"
	"github.com/shopspring/decimal"
)

const (
	// Label holds the string label denoting the airdropuser type in the database.
	Label = "airdrop_user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldPrivateKey holds the string denoting the private_key field in the database.
	FieldPrivateKey = "private_key"
	// FieldCanClaimAirdrop holds the string denoting the can_claim_airdrop field in the database.
	FieldCanClaimAirdrop = "can_claim_airdrop"
	// FieldLastAirdropClaimTime holds the string denoting the last_airdrop_claim_time field in the database.
	FieldLastAirdropClaimTime = "last_airdrop_claim_time"
	// FieldNextAirdropClaimTime holds the string denoting the next_airdrop_claim_time field in the database.
	FieldNextAirdropClaimTime = "next_airdrop_claim_time"
	// FieldClaimedAmount holds the string denoting the claimed_amount field in the database.
	FieldClaimedAmount = "claimed_amount"
	// FieldScheduledAmount holds the string denoting the scheduled_amount field in the database.
	FieldScheduledAmount = "scheduled_amount"
	// FieldAirdropFailedAttempts holds the string denoting the airdrop_failed_attempts field in the database.
	FieldAirdropFailedAttempts = "airdrop_failed_attempts"
	// Table holds the table name of the airdropuser in the database.
	Table = "airdrop_users"
)

// Columns holds all SQL columns for airdropuser fields.
var Columns = []string{
	FieldID,
	FieldAddress,
	FieldPrivateKey,
	FieldCanClaimAirdrop,
	FieldLastAirdropClaimTime,
	FieldNextAirdropClaimTime,
	FieldClaimedAmount,
	FieldScheduledAmount,
	FieldAirdropFailedAttempts,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// AddressValidator is a validator for the "address" field. It is called by the builders before save.
	AddressValidator func(string) error
	// PrivateKeyValidator is a validator for the "private_key" field. It is called by the builders before save.
	PrivateKeyValidator func(string) error
	// DefaultCanClaimAirdrop holds the default value on creation for the "can_claim_airdrop" field.
	DefaultCanClaimAirdrop int
	// DefaultLastAirdropClaimTime holds the default value on creation for the "last_airdrop_claim_time" field.
	DefaultLastAirdropClaimTime int64
	// DefaultNextAirdropClaimTime holds the default value on creation for the "next_airdrop_claim_time" field.
	DefaultNextAirdropClaimTime int64
	// DefaultClaimedAmount holds the default value on creation for the "claimed_amount" field.
	DefaultClaimedAmount decimal.Decimal
	// DefaultScheduledAmount holds the default value on creation for the "scheduled_amount" field.
	DefaultScheduledAmount decimal.Decimal
	// DefaultAirdropFailedAttempts holds the default value on creation for the "airdrop_failed_attempts" field.
	DefaultAirdropFailedAttempts int
	// AirdropFailedAttemptsValidator is a validator for the "airdrop_failed_attempts" field. It is called by the builders before save.
	AirdropFailedAttemptsValidator func(int) error
)

// OrderOption defines the ordering options for the AirdropUser queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAddress orders the results by the address field.
func ByAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddress, opts...).ToFunc()
}

// ByPrivateKey orders the results by the private_key field.
func ByPrivateKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrivateKey, opts...).ToFunc()
}

// ByCanClaimAirdrop orders the results by the can_claim_airdrop field.
func ByCanClaimAirdrop(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCanClaimAirdrop, opts...).ToFunc()
}

// ByLastAirdropClaimTime orders the results by the last_airdrop_claim_time field.
func ByLastAirdropClaimTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastAirdropClaimTime, opts...).ToFunc()
}

// ByNextAirdropClaimTime orders the results by the next_airdrop_claim_time field.
func ByNextAirdropClaimTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNextAirdropClaimTime, opts...).ToFunc()
}

// ByClaimedAmount orders the results by the claimed_amount field.
func ByClaimedAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClaimedAmount, opts...).ToFunc()
}

// ByScheduledAmount orders the results by the scheduled_amount field.
func ByScheduledAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScheduledAmount, opts...).ToFunc()
}

// ByAirdropFailedAttempts orders the results by the airdrop_failed_attempts field.
func ByAirdropFailedAttempts(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAirdropFailedAttempts, opts...).ToFunc()
}
