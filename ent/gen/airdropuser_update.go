// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"

	"github.com/go-ent/ent/dialect/sql"
	"github.com/go-ent/ent/dialect/sql/sqlgraph"
	"github.com/go-ent/ent/ent/gen/airdropuser"
	"github.com/go-ent/ent/ent/gen/predicate"
	"github.com/go-ent/ent/schema/field"
	"github.com/shopspring/decimal"
)

// AirdropUserUpdate is the builder for updating AirdropUser entities.
type AirdropUserUpdate struct {
	config
	hooks    []Hook
	mutation *AirdropUserMutation
}

// Where appends a list predicates to the AirdropUserUpdate builder.
func (auu *AirdropUserUpdate) Where(ps ...predicate.AirdropUser) *AirdropUserUpdate {
	auu.mutation.Where(ps...)
	return auu
}

// SetAddress sets the "address" field.
func (auu *AirdropUserUpdate) SetAddress(s string) *AirdropUserUpdate {
	auu.mutation.SetAddress(s)
	return auu
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (auu *AirdropUserUpdate) SetNillableAddress(s *string) *AirdropUserUpdate {
	if s != nil {
		auu.SetAddress(*s)
	}
	return auu
}

// SetPrivateKey sets the "private_key" field.
func (auu *AirdropUserUpdate) SetPrivateKey(s string) *AirdropUserUpdate {
	auu.mutation.SetPrivateKey(s)
	return auu
}

// SetNillablePrivateKey sets the "private_key" field if the given value is not nil.
func (auu *AirdropUserUpdate) SetNillablePrivateKey(s *string) *AirdropUserUpdate {
	if s != nil {
		auu.SetPrivateKey(*s)
	}
	return auu
}

// SetCanClaimAirdrop sets the "can_claim_airdrop" field.
func (auu *AirdropUserUpdate) SetCanClaimAirdrop(i int) *AirdropUserUpdate {
	auu.mutation.ResetCanClaimAirdrop()
	auu.mutation.SetCanClaimAirdrop(i)
	return auu
}

// SetNillableCanClaimAirdrop sets the "can_claim_airdrop" field if the given value is not nil.
func (auu *AirdropUserUpdate) SetNillableCanClaimAirdrop(i *int) *AirdropUserUpdate {
	if i != nil {
		auu.SetCanClaimAirdrop(*i)
	}
	return auu
}

// AddCanClaimAirdrop adds i to the "can_claim_airdrop" field.
func (auu *AirdropUserUpdate) AddCanClaimAirdrop(i int) *AirdropUserUpdate {
	auu.mutation.AddCanClaimAirdrop(i)
	return auu
}

// SetLastAirdropClaimTime sets the "last_airdrop_claim_time" field.
func (auu *AirdropUserUpdate) SetLastAirdropClaimTime(i int64) *AirdropUserUpdate {
	auu.mutation.ResetLastAirdropClaimTime()
	auu.mutation.SetLastAirdropClaimTime(i)
	return auu
}

// SetNillableLastAirdropClaimTime sets the "last_airdrop_claim_time" field if the given value is not nil.
func (auu *AirdropUserUpdate) SetNillableLastAirdropClaimTime(i *int64) *AirdropUserUpdate {
	if i != nil {
		auu.SetLastAirdropClaimTime(*i)
	}
	return auu
}

// AddLastAirdropClaimTime adds i to the "last_airdrop_claim_time" field.
func (auu *AirdropUserUpdate) AddLastAirdropClaimTime(i int64) *AirdropUserUpdate {
	auu.mutation.AddLastAirdropClaimTime(i)
	return auu
}

// SetNextAirdropClaimTime sets the "next_airdrop_claim_time" field.
func (auu *AirdropUserUpdate) SetNextAirdropClaimTime(i int64) *AirdropUserUpdate {
	auu.mutation.ResetNextAirdropClaimTime()
	auu.mutation.SetNextAirdropClaimTime(i)
	return auu
}

// SetNillableNextAirdropClaimTime sets the "next_airdrop_claim_time" field if the given value is not nil.
func (auu *AirdropUserUpdate) SetNillableNextAirdropClaimTime(i *int64) *AirdropUserUpdate {
	if i != nil {
		auu.SetNextAirdropClaimTime(*i)
	}
	return auu
}

// AddNextAirdropClaimTime adds i to the "next_airdrop_claim_time" field.
func (auu *AirdropUserUpdate) AddNextAirdropClaimTime(i int64) *AirdropUserUpdate {
	auu.mutation.AddNextAirdropClaimTime(i)
	return auu
}

// SetClaimedAmount sets the "claimed_amount" field.
func (auu *AirdropUserUpdate) SetClaimedAmount(d decimal.Decimal) *AirdropUserUpdate {
	auu.mutation.SetClaimedAmount(d)
	return auu
}

// SetNillableClaimedAmount sets the "claimed_amount" field if the given value is not nil.
func (auu *AirdropUserUpdate) SetNillableClaimedAmount(d *decimal.Decimal) *AirdropUserUpdate {
	if d != nil {
		auu.SetClaimedAmount(*d)
	}
	return auu
}

// SetScheduledAmount sets the "scheduled_amount" field.
func (auu *AirdropUserUpdate) SetScheduledAmount(d decimal.Decimal) *AirdropUserUpdate {
	auu.mutation.SetScheduledAmount(d)
	return auu
}

// SetNillableScheduledAmount sets the "scheduled_amount" field if the given value is not nil.
func (auu *AirdropUserUpdate) SetNillableScheduledAmount(d *decimal.Decimal) *AirdropUserUpdate {
	if d != nil {
		auu.SetScheduledAmount(*d)
	}
	return auu
}

// SetAirdropFailedAttempts sets the "airdrop_failed_attempts" field.
func (auu *AirdropUserUpdate) SetAirdropFailedAttempts(i int) *AirdropUserUpdate {
	auu.mutation.ResetAirdropFailedAttempts()
	auu.mutation.SetAirdropFailedAttempts(i)
	return auu
}

// SetNillableAirdropFailedAttempts sets the "airdrop_failed_attempts" field if the given value is not nil.
func (auu *AirdropUserUpdate) SetNillableAirdropFailedAttempts(i *int) *AirdropUserUpdate {
	if i != nil {
		auu.SetAirdropFailedAttempts(*i)
	}
	return auu
}

// AddAirdropFailedAttempts adds i to the "airdrop_failed_attempts" field.
func (auu *AirdropUserUpdate) AddAirdropFailedAttempts(i int) *AirdropUserUpdate {
	auu.mutation.AddAirdropFailedAttempts(i)
	return auu
}

// Mutation returns the AirdropUserMutation object of the builder.
func (auu *AirdropUserUpdate) Mutation() *AirdropUserMutation {
	return auu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (auu *AirdropUserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, auu.sqlSave, auu.mutation, auu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auu *AirdropUserUpdate) SaveX(ctx context.Context) int {
	affected, err := auu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (auu *AirdropUserUpdate) Exec(ctx context.Context) error {
	_, err := auu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auu *AirdropUserUpdate) ExecX(ctx context.Context) {
	if err := auu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auu *AirdropUserUpdate) check() error {
	if v, ok := auu.mutation.Address(); ok {
		if err := airdropuser.AddressValidator(v); err != nil {
			return &ValidationError{Name: "address", err: fmt.Errorf(`gen: validator failed for field "AirdropUser.address": %w`, err)}
		}
	}
	if v, ok := auu.mutation.PrivateKey(); ok {
		if err := airdropuser.PrivateKeyValidator(v); err != nil {
			return &ValidationError{Name: "private_key", err: fmt.Errorf(`gen: validator failed for field "AirdropUser.private_key": %w`, err)}
		}
	}
	if v, ok := auu.mutation.AirdropFailedAttempts(); ok {
		if err := airdropuser.AirdropFailedAttemptsValidator(v); err != nil {
			return &ValidationError{Name: "airdrop_failed_attempts", err: fmt.Errorf(`gen: validator failed for field "AirdropUser.airdrop_failed_attempts": %w`, err)}
		}
	}
	return nil
}

func (auu *AirdropUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := auu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(airdropuser.Table, airdropuser.Columns, sqlgraph.NewFieldSpec(airdropuser.FieldID, field.TypeUint))
	if ps := auu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auu.mutation.Address(); ok {
		_spec.SetField(airdropuser.FieldAddress, field.TypeString, value)
	}
	if value, ok := auu.mutation.PrivateKey(); ok {
		_spec.SetField(airdropuser.FieldPrivateKey, field.TypeString, value)
	}
	if value, ok := auu.mutation.CanClaimAirdrop(); ok {
		_spec.SetField(airdropuser.FieldCanClaimAirdrop, field.TypeInt, value)
	}
	if value, ok := auu.mutation.AddedCanClaimAirdrop(); ok {
		_spec.AddField(airdropuser.FieldCanClaimAirdrop, field.TypeInt, value)
	}
	if value, ok := auu.mutation.LastAirdropClaimTime(); ok {
		_spec.SetField(airdropuser.FieldLastAirdropClaimTime, field.TypeInt64, value)
	}
	if value, ok := auu.mutation.AddedLastAirdropClaimTime(); ok {
		_spec.AddField(airdropuser.FieldLastAirdropClaimTime, field.TypeInt64, value)
	}
	if value, ok := auu.mutation.NextAirdropClaimTime(); ok {
		_spec.SetField(airdropuser.FieldNextAirdropClaimTime, field.TypeInt64, value)
	}
	if value, ok := auu.mutation.AddedNextAirdropClaimTime(); ok {
		_spec.AddField(airdropuser.FieldNextAirdropClaimTime, field.TypeInt64, value)
	}
	if value, ok := auu.mutation.ClaimedAmount(); ok {
		_spec.SetField(airdropuser.FieldClaimedAmount, field.TypeOther, value)
	}
	if value, ok := auu.mutation.ScheduledAmount(); ok {
		_spec.SetField(airdropuser.FieldScheduledAmount, field.TypeOther, value)
	}
	if value, ok := auu.mutation.AirdropFailedAttempts(); ok {
		_spec.SetField(airdropuser.FieldAirdropFailedAttempts, field.TypeInt, value)
	}
	if value, ok := auu.mutation.AddedAirdropFailedAttempts(); ok {
		_spec.AddField(airdropuser.FieldAirdropFailedAttempts, field.TypeInt, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, auu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{airdropuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	auu.mutation.done = true
	return n, nil
}

// AirdropUserUpdateOne is the builder for updating a single AirdropUser entity.
type AirdropUserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AirdropUserMutation
}

// SetAddress sets the "address" field.
func (auuo *AirdropUserUpdateOne) SetAddress(s string) *AirdropUserUpdateOne {
	auuo.mutation.SetAddress(s)
	return auuo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (auuo *AirdropUserUpdateOne) SetNillableAddress(s *string) *AirdropUserUpdateOne {
	if s != nil {
		auuo.SetAddress(*s)
	}
	return auuo
}

// SetPrivateKey sets the "private_key" field.
func (auuo *AirdropUserUpdateOne) SetPrivateKey(s string) *AirdropUserUpdateOne {
	auuo.mutation.SetPrivateKey(s)
	return auuo
}

// SetNillablePrivateKey sets the "private_key" field if the given value is not nil.
func (auuo *AirdropUserUpdateOne) SetNillablePrivateKey(s *string) *AirdropUserUpdateOne {
	if s != nil {
		auuo.SetPrivateKey(*s)
	}
	return auuo
}

// SetCanClaimAirdrop sets the "can_claim_airdrop" field.
func (auuo *AirdropUserUpdateOne) SetCanClaimAirdrop(i int) *AirdropUserUpdateOne {
	auuo.mutation.ResetCanClaimAirdrop()
	auuo.mutation.SetCanClaimAirdrop(i)
	return auuo
}

// SetNillableCanClaimAirdrop sets the "can_claim_airdrop" field if the given value is not nil.
func (auuo *AirdropUserUpdateOne) SetNillableCanClaimAirdrop(i *int) *AirdropUserUpdateOne {
	if i != nil {
		auuo.SetCanClaimAirdrop(*i)
	}
	return auuo
}

// AddCanClaimAirdrop adds i to the "can_claim_airdrop" field.
func (auuo *AirdropUserUpdateOne) AddCanClaimAirdrop(i int) *AirdropUserUpdateOne {
	auuo.mutation.AddCanClaimAirdrop(i)
	return auuo
}

// SetLastAirdropClaimTime sets the "last_airdrop_claim_time" field.
func (auuo *AirdropUserUpdateOne) SetLastAirdropClaimTime(i int64) *AirdropUserUpdateOne {
	auuo.mutation.ResetLastAirdropClaimTime()
	auuo.mutation.SetLastAirdropClaimTime(i)
	return auuo
}

// SetNillableLastAirdropClaimTime sets the "last_airdrop_claim_time" field if the given value is not nil.
func (auuo *AirdropUserUpdateOne) SetNillableLastAirdropClaimTime(i *int64) *AirdropUserUpdateOne {
	if i != nil {
		auuo.SetLastAirdropClaimTime(*i)
	}
	return auuo
}

// AddLastAirdropClaimTime adds i to the "last_airdrop_claim_time" field.
func (auuo *AirdropUserUpdateOne) AddLastAirdropClaimTime(i int64) *AirdropUserUpdateOne {
	auuo.mutation.AddLastAirdropClaimTime(i)
	return auuo
}

// SetNextAirdropClaimTime sets the "next_airdrop_claim_time" field.
func (auuo *AirdropUserUpdateOne) SetNextAirdropClaimTime(i int64) *AirdropUserUpdateOne {
	auuo.mutation.ResetNextAirdropClaimTime()
	auuo.mutation.SetNextAirdropClaimTime(i)
	return auuo
}

// SetNillableNextAirdropClaimTime sets the "next_airdrop_claim_time" field if the given value is not nil.
func (auuo *AirdropUserUpdateOne) SetNillableNextAirdropClaimTime(i *int64) *AirdropUserUpdateOne {
	if i != nil {
		auuo.SetNextAirdropClaimTime(*i)
	}
	return auuo
}

// AddNextAirdropClaimTime adds i to the "next_airdrop_claim_time" field.
func (auuo *AirdropUserUpdateOne) AddNextAirdropClaimTime(i int64) *AirdropUserUpdateOne {
	auuo.mutation.AddNextAirdropClaimTime(i)
	return auuo
}

// SetClaimedAmount sets the "claimed_amount" field.
func (auuo *AirdropUserUpdateOne) SetClaimedAmount(d decimal.Decimal) *AirdropUserUpdateOne {
	auuo.mutation.SetClaimedAmount(d)
	return auuo
}

// SetNillableClaimedAmount sets the "claimed_amount" field if the given value is not nil.
func (auuo *AirdropUserUpdateOne) SetNillableClaimedAmount(d *decimal.Decimal) *AirdropUserUpdateOne {
	if d != nil {
		auuo.SetClaimedAmount(*d)
	}
	return auuo
}

// SetScheduledAmount sets the "scheduled_amount" field.
func (auuo *AirdropUserUpdateOne) SetScheduledAmount(d decimal.Decimal) *AirdropUserUpdateOne {
	auuo.mutation.SetScheduledAmount(d)
	return auuo
}

// SetNillableScheduledAmount sets the "scheduled_amount" field if the given value is not nil.
func (auuo *AirdropUserUpdateOne) SetNillableScheduledAmount(d *decimal.Decimal) *AirdropUserUpdateOne {
	if d != nil {
		auuo.SetScheduledAmount(*d)
	}
	return auuo
}

// SetAirdropFailedAttempts sets the "airdrop_failed_attempts" field.
func (auuo *AirdropUserUpdateOne) SetAirdropFailedAttempts(i int) *AirdropUserUpdateOne {
	auuo.mutation.ResetAirdropFailedAttempts()
	auuo.mutation.SetAirdropFailedAttempts(i)
	return auuo
}

// SetNillableAirdropFailedAttempts sets the "airdrop_failed_attempts" field if the given value is not nil.
func (auuo *AirdropUserUpdateOne) SetNillableAirdropFailedAttempts(i *int) *AirdropUserUpdateOne {
	if i != nil {
		auuo.SetAirdropFailedAttempts(*i)
	}
	return auuo
}

// AddAirdropFailedAttempts adds i to the "airdrop_failed_attempts" field.
func (auuo *AirdropUserUpdateOne) AddAirdropFailedAttempts(i int) *AirdropUserUpdateOne {
	auuo.mutation.AddAirdropFailedAttempts(i)
	return auuo
}

// Mutation returns the AirdropUserMutation object of the builder.
func (auuo *AirdropUserUpdateOne) Mutation() *AirdropUserMutation {
	return auuo.mutation
}

// Where appends a list predicates to the AirdropUserUpdate builder.
func (auuo *AirdropUserUpdateOne) Where(ps ...predicate.AirdropUser) *AirdropUserUpdateOne {
	auuo.mutation.Where(ps...)
	return auuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auuo *AirdropUserUpdateOne) Select(field string, fields ...string) *AirdropUserUpdateOne {
	auuo.fields = append([]string{field}, fields...)
	return auuo
}

// Save executes the query and returns the updated AirdropUser entity.
func (auuo *AirdropUserUpdateOne) Save(ctx context.Context) (*AirdropUser, error) {
	return withHooks(ctx, auuo.sqlSave, auuo.mutation, auuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auuo *AirdropUserUpdateOne) SaveX(ctx context.Context) *AirdropUser {
	node, err := auuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auuo *AirdropUserUpdateOne) Exec(ctx context.Context) error {
	_, err := auuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auuo *AirdropUserUpdateOne) ExecX(ctx context.Context) {
	if err := auuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auuo *AirdropUserUpdateOne) check() error {
	if v, ok := auuo.mutation.Address(); ok {
		if err := airdropuser.AddressValidator(v); err != nil {
			return &ValidationError{Name: "address", err: fmt.Errorf(`gen: validator failed for field "AirdropUser.address": %w`, err)}
		}
	}
	if v, ok := auuo.mutation.PrivateKey(); ok {
		if err := airdropuser.PrivateKeyValidator(v); err != nil {
			return &ValidationError{Name: "private_key", err: fmt.Errorf(`gen: validator failed for field "AirdropUser.private_key": %w`, err)}
		}
	}
	if v, ok := auuo.mutation.AirdropFailedAttempts(); ok {
		if err := airdropuser.AirdropFailedAttemptsValidator(v); err != nil {
			return &ValidationError{Name: "airdrop_failed_attempts", err: fmt.Errorf(`gen: validator failed for field "AirdropUser.airdrop_failed_attempts": %w`, err)}
		}
	}
	return nil
}

func (auuo *AirdropUserUpdateOne) sqlSave(ctx context.Context) (_node *AirdropUser, err error) {
	if err := auuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(airdropuser.Table, airdropuser.Columns, sqlgraph.NewFieldSpec(airdropuser.FieldID, field.TypeUint))
	id, ok := auuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`gen: missing "AirdropUser.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, airdropuser.FieldID)
		for _, f := range fields {
			if !airdropuser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
			}
			if f != airdropuser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auuo.mutation.Address(); ok {
		_spec.SetField(airdropuser.FieldAddress, field.TypeString, value)
	}
	if value, ok := auuo.mutation.PrivateKey(); ok {
		_spec.SetField(airdropuser.FieldPrivateKey, field.TypeString, value)
	}
	if value, ok := auuo.mutation.CanClaimAirdrop(); ok {
		_spec.SetField(airdropuser.FieldCanClaimAirdrop, field.TypeInt, value)
	}
	if value, ok := auuo.mutation.AddedCanClaimAirdrop(); ok {
		_spec.AddField(airdropuser.FieldCanClaimAirdrop, field.TypeInt, value)
	}
	if value, ok := auuo.mutation.LastAirdropClaimTime(); ok {
		_spec.SetField(airdropuser.FieldLastAirdropClaimTime, field.TypeInt64, value)
	}
	if value, ok := auuo.mutation.AddedLastAirdropClaimTime(); ok {
		_spec.AddField(airdropuser.FieldLastAirdropClaimTime, field.TypeInt64, value)
	}
	if value, ok := auuo.mutation.NextAirdropClaimTime(); ok {
		_spec.SetField(airdropuser.FieldNextAirdropClaimTime, field.TypeInt64, value)
	}
	if value, ok := auuo.mutation.AddedNextAirdropClaimTime(); ok {
		_spec.AddField(airdropuser.FieldNextAirdropClaimTime, field.TypeInt64, value)
	}
	if value, ok := auuo.mutation.ClaimedAmount(); ok {
		_spec.SetField(airdropuser.FieldClaimedAmount, field.TypeOther, value)
	}
	if value, ok := auuo.mutation.ScheduledAmount(); ok {
		_spec.SetField(airdropuser.FieldScheduledAmount, field.TypeOther, value)
	}
	if value, ok := auuo.mutation.AirdropFailedAttempts(); ok {
		_spec.SetField(airdropuser.FieldAirdropFailedAttempts, field.TypeInt, value)
	}
	if value, ok := auuo.mutation.AddedAirdropFailedAttempts(); ok {
		_spec.AddField(airdropuser.FieldAirdropFailedAttempts, field.TypeInt, value)
	}
	_node = &AirdropUser{config: auuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{airdropuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auuo.mutation.done = true
	return _node, nil
}
